#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    pre-commit-populate-pylint-requirements
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Pre-commit hook that populates the PyLint requirements
    in the pre-commit config file
"""

from __future__ import absolute_import, print_function
import os
import argparse
from ruamel.yaml import YAML


def _parse_requirements_file(requirements_file):
    '''
    Parse requirements.txt and return list suitable for
    passing to ``install_requires`` parameter in ``setup()``.
    '''
    parsed_requirements = []
    with open(requirements_file) as rfh:
        for line in rfh.readlines():
            line = line.strip()
            if not line or line.startswith(('#', '-r')):
                continue
            parsed_requirements.append(line)
    return parsed_requirements


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-r', '--requirements-file',
        action='append',
        default=[]
    )
    parser.add_argument(
        '-c', '--pre-commit-config-file',
        default='.pre-commit-config.yaml'
    )
    parser.add_argument(
        '-i', '--pylint-hook-id',
        default='pylint'
    )

    options = parser.parse_args()

    requirements = []
    for requirements_file in options.requirements_file:
        requirements.extend(_parse_requirements_file(requirements_file))

    if not requirements:
        parser.exit(1, 'No requirements parsed')

    requirements = sorted(set(requirements))

    yaml=YAML()
    yaml.explicit_start = True
    yaml.default_flow_style = False
    yaml.compact(seq_seq=False, seq_map=True)

    if not os.path.exists(options.pre_commit_config_file):
        parser.exit(
            1,
            'The pre-commit config file, {}, does not exist'.format(
                options.pre_commit_config_file
            )
        )

    with open(options.pre_commit_config_file) as rfh:
        pre_commit_config = yaml.load(rfh.read())


    requirements_changed = False
    pylint_hook_found = False

    for repo_config in pre_commit_config['repos']:
        for hook in repo_config['hooks']:
            if hook['id'] != options.pylint_hook_id:
                continue
            pylint_hook_found = True
            if hook['additional_dependencies'] != requirements:
                hook['additional_dependencies'] = requirements
                requirements_changed = True

    if pylint_hook_found is False:
        parser.exit(
            1,
            'Unable to find the pylint hook with the {} id'.format(
                options.pylint_hook_id
            )
        )

    if not requirements_changed:
        parser.exit(0, 'No changes were made')

    with open(options.pre_commit_config_file, 'w') as wfh:
        yaml.dump(pre_commit_config, wfh)

    parser.exit(2, 'The PyLint requirements were updated')


if __name__ == "__main__":
    main()
